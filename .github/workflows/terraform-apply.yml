name: 'Terraform'

on:
  workflow_dispatch:
env:
  ENV: dev
  BUCKET_NAME: aws-vm-test1-s3-tfstate
  DYNAMO_DB : aws-vm-test1-s3-tfstatelock
  REGION : us-east-1

jobs:
         
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    #Configuring aws_credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # if you have/need it
       aws-region: ${{ env.REGION }}
       
    - name: Setup Remote state
      run: |
        chmod +x remote-state.sh
        ./remote-state.sh $BUCKET_NAME $DYNAMO_DB $REGION

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -no-color -reconfigure -force-copy -backend-config="bucket=$BUCKET_NAME" -backend-config="key=${{ env.TF_VAR_STATE_FILE }}" -backend-config="dynamodb_table=$DYNAMO_DB" -backend-config="encrypt=true"
      env:
        TF_VAR_STATE_FILE: "$ENV-${{ github.event.repository.name }}.tfstate" 

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var 'client=${{secrets.LAMBDA_SECRETS}}' -input=false -lock=false
#       run: terraform plan -var 'client={"client_id":"asgvv234","password":"hbch#2k"}' -input=false -lock=false

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -var 'client=${{secrets.LAMBDA_SECRETS}}' -input=false -lock=false 
